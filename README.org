#+title: Personix
#+description: All the Hacks So You Don't Hacks To

** A Call to Action

Configuring personal infrastructure  is too hard, which limits both what we can accomplish, and who can play along.

Let's make it easier for everyone, so we can move forward and build stronger communities.
There's lots more fun to be had further down the road.

* Personix
** About
Composable layers for configuring your personal systems.
 
** Design principles
*** [[https://dl.acm.org/doi/fullHtml/10.1145/3411764.3445231][Expressivity]]
- model config using meaningful domain objects
- minimize boilerplater


** Usage
The basic flow is to create your own instance repo using the provided template, then then modify it using the inline comments as your guide, to suit your needs. Think something like Spacemacs/Doom Emacs, but for your personal systems.
You can also use tools provided by this repo ad-hoc, without any config. More on that later.
*** Install Nix
If you don't already have Nix on the current host,
 - Linux and MacOS: run [[file:cmd/install-nix][./cmd/install-nix]]. You can just paste the contents into a term or whatever if you don't have this repo checked out locally.
 - Windows: You can install Nix into the default Ubuntu/Debian WSL2 env under Windows, although I would instead recommend installing a NixOS env using [[https://github.com/nix-community/NixOS-WSL][nix-community/NixOS-WSL]]
   - Android: install the [[https://github.com/t184256/nix-on-droid][nix-on-droid]] app, which provides a Nix chroot ala Termux, [[https://f-droid.org/packages/com.termux.nix/][from F-Droid]] (I highly recommend [[https://f-droid.org/en/packages/com.machiav3lli.fdroid/][Neo Store]] over the official F-Droid client app). Nix-on-droid also offers some platform integrations to control your Android device.
** Tasks
*** Epics
**** Bootstrap
***** DONE install-nix script (just run determinate installer)
***** TODO tools/nix metapackage
- nix-tree
***** tools/helix metapackage
***** TODO bootstrap script
 - set experimental flags
 - host name
 - build nix-darwin or nixos
**** nix-on-droid
**** Nix-Darwin
**** Home-manager
**** NixOS
**** WSL2
***** TODO Install script for WSL2 NixOS
** Plan
- Factor out stuff from [[https://github.com/edrex/nixcfg/][edrex/nixcfg]], and add this repo as a dependency for that
- Develop @mathpunk's config in a subdir [[file:persons/mathpunk]] to keep everything sync'd up as we bootstrap.
- Develop [[file:templates/default]] in parallel, adding each feature as it becomes available. Inline comments there should comprehensively document currently available functionality.
  - Idea: template instantiation preserves git history, use git merge to update template
- Once things are reasonably feature-complete, we'll factor out Tom's config using git-filter-repo.
** Ideas
*** Layers and modules
A common pattern in the Nix ecosystem is to create a project which defines new output types, and use Nix modules as a mechanism for composable configuration of those outputs.

Some examples

 - NixOS for Linux system
 - Home Manager for home environment
 - Nix-Darwin for MacOS config
 - Nix-On-Droid for Android system integration (installing packages and running adb scripts etc)
 - Robotnix for building Android firmware images
 - and of course flake-parts, for composing flakes (it's a bit meta since all the others just produce a single output)

I am designing a new code abstraction I'm calling "Layers".

Layers should be flexible enough to allow the layer author to do anything in any of the above systems, while exposing a maximally expressive domain-appropriate configuration interface to layer consumers (instance configuration).

This is a tricky set of design constraints, and solving for them is key to the success of this project.
*** Organix vs Personix
Things like the BlobStore are needed by both. Can they mutually consume?
** Layers
*** Organix
**** Data
***** WAIT BlobStore
Garage
*** Muhdata
**** Org
***** Orgmode
****** TODO Doom emacs with org mode configured via nix, still support user config too
****** TODO Browser extension to clip to org mode (basically capture from browser)
****** TODO Look into emacs-everywhere for capture inside other apps
***** Records
****** Workflow for scan ingress
****** Maybe use PhotoPrism for frontend, although ideally something records-specific
**** Photos
***** Frontend web app (PhotoPrism)
***** Android ingress config, auto creds
**** Archival
- backup.sources (so other layers can add backup sources, indep of backup tool used)
***** Kopia
**** Social
***** Signal archiver

Set up https://signald.org/articles/database/ and database backups.

****** Config with creds, tell it where to store, and it will keep a message archive for you
**** Browser
*** UI
**** Dark mode
Global dark mode toggle. Other layers can have hooks.
**** Wayland
***** Utils
***** Start script
***** HOLD Display mgr
***** mobile
****** sxmo
Need to get a device with good hardware support for PMOS
******* [chuangzhu/nixpkgs-sxmo: An attempt porting sxmo to Nixpkgs.](https://github.com/chuangzhu/nixpkgs-sxmo)
******* [wentam/sxmo-nix](https://github.com/wentam/sxmo-nix)
******* [Sxmo: Freedom on mobile devices through simplicity and hackability - Framatube](https://framatube.org/w/dHBrnMQeEt8Mq82KxV4zKm?start=0s)
*** Sys
**** Nix
Install scripts, utilities, and configuration for Nix itself
*** Host
**** NixOS
Linux OS managed by Nix
**** Home-manager
Home env managed by nix
**** Nix-Darwin
MacOS system "
**** Host
